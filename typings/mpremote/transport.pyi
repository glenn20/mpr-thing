import os
from collections import namedtuple
from typing import Callable, Optional, Sequence

listdir_result = namedtuple("dir_result", ["name", "st_mode", "st_ino", "st_size"])  # type: ignore

class TransportError(Exception):
    pass

class Transport:
    def fs_listdir(self, src: str = "") -> Sequence[listdir_result]: ...
    def fs_stat(self, src: str) -> os.stat_result: ...
    def fs_exists(self, src: str) -> bool: ...
    def fs_isdir(self, src: str) -> bool: ...
    def fs_printfile(self, src: str, chunk_size: int = 256) -> None: ...
    def fs_mkdir(self, path: str) -> None: ...
    def fs_rmdir(self, path: str) -> None: ...
    def fs_rmfile(self, path: str) -> None: ...
    def fs_touchfile(self, path: str) -> None: ...
    def fs_hashfile(self, path: str, algo: str, chunk_size: int = 256) -> bytes: ...
    def fs_readfile(
        self,
        src: str,
        chunk_size: int = 256,
        progress_callback: Optional[Callable[[int, int], None]] = None,
    ) -> bytes: ...
    def fs_writefile(
        self,
        dest: str,
        data: bytes,
        chunk_size: int = 256,
        progress_callback: Optional[Callable[[int, int], None]] = None,
    ) -> None: ...
